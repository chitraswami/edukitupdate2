{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/gagan/OneDrive/Documents/Desktop/client-app/login-page/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nclass BaseLoginProvider {\n  constructor() {}\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n      parentElement.appendChild(signInJS);\n    }\n  }\n}\nclass SocialUser {}\nconst defaultInitOptions = {\n  oneTapEnabled: true\n};\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.changeUser = new EventEmitter();\n    this._socialUser = new BehaviorSubject(null);\n    this._accessToken = new BehaviorSubject(null);\n    this._receivedAccessToken = new EventEmitter();\n    this.initOptions = {\n      ...defaultInitOptions,\n      ...this.initOptions\n    };\n    // emit changeUser events but skip initial value from behaviorSubject\n    this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\n    // emit receivedAccessToken but skip initial value from behaviorSubject\n    this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\n  }\n  initialize(autoLogin) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\n          google.accounts.id.initialize({\n            client_id: this.clientId,\n            auto_select: autoLogin,\n            callback: ({\n              credential\n            }) => {\n              const socialUser = this.createSocialUser(credential);\n              this._socialUser.next(socialUser);\n            },\n            prompt_parent_id: this.initOptions?.prompt_parent_id,\n            itp_support: this.initOptions.oneTapEnabled\n          });\n          if (this.initOptions.oneTapEnabled) {\n            this._socialUser.pipe(filter(user => user === null)).subscribe(() => google.accounts.id.prompt(console.debug));\n          }\n          if (this.initOptions.scopes) {\n            const scope = this.initOptions.scopes instanceof Array ? this.initOptions.scopes.filter(s => s).join(' ') : this.initOptions.scopes;\n            this._tokenClient = google.accounts.oauth2.initTokenClient({\n              client_id: this.clientId,\n              scope,\n              prompt: this.initOptions.prompt,\n              callback: tokenResponse => {\n                if (tokenResponse.error) {\n                  this._accessToken.error({\n                    code: tokenResponse.error,\n                    description: tokenResponse.error_description,\n                    uri: tokenResponse.error_uri\n                  });\n                } else {\n                  this._accessToken.next(tokenResponse.access_token);\n                }\n              }\n            });\n          }\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this._socialUser.value) {\n        resolve(this._socialUser.value);\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  refreshToken() {\n    return new Promise((resolve, reject) => {\n      google.accounts.id.revoke(this._socialUser.value.id, response => {\n        if (response.error) reject(response.error);else resolve(this._socialUser.value);\n      });\n    });\n  }\n  getAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        if (this._socialUser.value) {\n          reject('No token client was instantiated, you should specify some scopes.');\n        } else {\n          reject('You should be logged-in first.');\n        }\n      } else {\n        this._tokenClient.requestAccessToken({\n          hint: this._socialUser.value?.email\n        });\n        this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n      }\n    });\n  }\n  revokeAccessToken() {\n    return new Promise((resolve, reject) => {\n      if (!this._tokenClient) {\n        reject('No token client was instantiated, you should specify some scopes.');\n      } else if (!this._accessToken.value) {\n        reject('No access token to revoke');\n      } else {\n        google.accounts.oauth2.revoke(this._accessToken.value, () => {\n          this._accessToken.next(null);\n          resolve();\n        });\n      }\n    });\n  }\n  signIn() {\n    return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n  }\n  signOut() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      google.accounts.id.disableAutoSelect();\n      _this._socialUser.next(null);\n    })();\n  }\n  createSocialUser(idToken) {\n    const user = new SocialUser();\n    user.idToken = idToken;\n    const payload = this.decodeJwt(idToken);\n    user.id = payload.sub;\n    user.name = payload.name;\n    user.email = payload.email;\n    user.photoUrl = payload.picture;\n    user.firstName = payload['given_name'];\n    user.lastName = payload['family_name'];\n    return user;\n  }\n  decodeJwt(idToken) {\n    const base64Url = idToken.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n      return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(\"\"));\n    return JSON.parse(jsonPayload);\n  }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\nclass SocialAuthService {\n  /**\r\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n   */\n  constructor(config, _ngZone, _injector) {\n    this._ngZone = _ngZone;\n    this._injector = _injector;\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n  get initState() {\n    return this._initState.asObservable();\n  }\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, 'prototype' in item.provider ? this._injector.get(item.provider) : item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize(this.autoLogin))).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          const promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            this.setUser(user, key);\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n            this._authState.next(null);\n          }\n        });\n      }\n      this.providers.forEach((provider, key) => {\n        if (isObservable(provider.changeUser)) {\n          provider.changeUser.subscribe(user => {\n            this._ngZone.run(() => {\n              this.setUser(user, key);\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n      this._initState.next(this.initialized);\n      this._initState.complete();\n    });\n  }\n  getAccessToken(providerId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const providerObject = _this2.providers.get(providerId);\n      if (!_this2.initialized) {\n        throw SocialAuthService.ERR_NOT_INITIALIZED;\n      } else if (!providerObject) {\n        throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n      } else if (!(providerObject instanceof GoogleLoginProvider)) {\n        throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n      }\n      return yield providerObject.getAccessToken();\n    })();\n  }\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          if (typeof providerObject.refreshToken !== 'function') {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            providerObject.refreshToken().then(user => {\n              this.setUser(user, providerId);\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          }\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  refreshAccessToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n        if (providerObject instanceof GoogleLoginProvider) {\n          providerObject.revokeAccessToken().then(resolve).catch(reject);\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign in a user with a specific `LoginProvider`.\r\n   *\r\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n   * @param signInOptions Optional `LoginProvider` specific arguments\r\n   * @returns A `Promise` that resolves to the authenticated user information\r\n   */\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            this.setUser(user, providerId);\n            resolve(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\r\n   * A method used to sign out the currently loggen in user.\r\n   *\r\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n   */\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this.setUser(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  setUser(user, id) {\n    if (user && id) user.provider = id;\n    this._user = user;\n    this._authState.next(user);\n  }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n};\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass GoogleSigninButtonDirective {\n  constructor(el, socialAuthService) {\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(() => {\n      Promise.resolve(this.width).then(value => {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: this.type,\n            size: this.size,\n            text: this.text,\n            width: this.width,\n            shape: this.shape,\n            theme: this.theme,\n            logo_alignment: this.logo_alignment,\n            locale: this.locale\n          });\n        }\n      });\n    });\n  }\n}\nGoogleSigninButtonDirective.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n  return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n};\nGoogleSigninButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleSigninButtonDirective,\n  selectors: [[\"asl-google-signin-button\"]],\n  inputs: {\n    type: \"type\",\n    size: \"size\",\n    text: \"text\",\n    shape: \"shape\",\n    theme: \"theme\",\n    logo_alignment: \"logo_alignment\",\n    width: \"width\",\n    locale: \"locale\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleSigninButtonDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'asl-google-signin-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: SocialAuthService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    shape: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    logo_alignment: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\r\n * The main module of angularx-social-login library.\r\n */\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n}\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleSigninButtonDirective],\n      imports: [CommonModule],\n      providers: [SocialAuthService],\n      exports: [GoogleSigninButtonDirective]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})();\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    }\n    // Start not logged in\n    this.loggedIn = false;\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = {\n      ...this.requestOptions,\n      ...initOptions\n    };\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n  signIn(signInOptions) {\n    const options = {\n      ...this.requestOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n  initialize() {\n    let amazonRoot = null;\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n  signIn(signInOptions) {\n    const options = {\n      ...this.initOptions,\n      ...signInOptions\n    };\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = {\n      ...this.initOptions,\n      ...initOptions\n    };\n  }\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: this.initOptions.redirect_uri ?? location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      };\n      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n  getLoginStatus() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const accounts = _this3._instance.getAllAccounts();\n      if (accounts?.length > 0) {\n        const loginResponse = yield _this3._instance.ssoSilent({\n          scopes: _this3.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield _this3.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    })();\n  }\n  signIn() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const loginResponse = yield _this4._instance.loginPopup({\n        scopes: _this4.initOptions.scopes,\n        prompt: _this4.initOptions.prompt\n      });\n      return yield _this4.getSocialUser(loginResponse);\n    })();\n  }\n  signOut(revoke) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const accounts = _this5._instance.getAllAccounts();\n      if (accounts?.length > 0) {\n        yield _this5._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: _this5.initOptions.logout_redirect_uri ?? _this5.initOptions.redirect_uri ?? location.href\n        });\n      }\n    })();\n  }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"names":["i0","EventEmitter","Injectable","Inject","Directive","Input","NgModule","Optional","SkipSelf","BehaviorSubject","skip","filter","take","ReplaySubject","AsyncSubject","isObservable","CommonModule","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","defaultInitOptions","oneTapEnabled","GoogleLoginProvider","clientId","initOptions","changeUser","_socialUser","_accessToken","_receivedAccessToken","pipe","subscribe","initialize","autoLogin","Promise","resolve","reject","PROVIDER_ID","google","accounts","client_id","auto_select","callback","credential","socialUser","createSocialUser","next","prompt_parent_id","itp_support","user","prompt","console","debug","scopes","scope","Array","s","join","_tokenClient","oauth2","initTokenClient","tokenResponse","error","code","description","error_description","uri","error_uri","access_token","err","getLoginStatus","value","refreshToken","revoke","response","getAccessToken","requestAccessToken","hint","email","revokeAccessToken","signIn","signOut","disableAutoSelect","idToken","payload","decodeJwt","sub","name","photoUrl","picture","firstName","lastName","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","JSON","parse","SocialAuthService","config","_ngZone","_injector","providers","Map","_user","_authState","initialized","_initState","then","authState","asObservable","initState","undefined","onError","forEach","item","set","provider","get","all","from","values","loginStatusPromises","loggedIn","key","promise","push","setUser","catch","run","finally","complete","providerId","providerObject","ERR_NOT_INITIALIZED","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN","refreshAuthToken","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","refreshAccessToken","signInOptions","ERR_NOT_LOGGED_IN","ɵfac","NgZone","Injector","ɵprov","type","args","providedIn","decorators","GoogleSigninButtonDirective","el","socialAuthService","size","text","shape","theme","logo_alignment","width","locale","renderButton","nativeElement","ElementRef","ɵdir","selector","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","ɵmod","ɵinj","declarations","imports","exports","DummyLoginProvider","dummy","DEFAULT_USER","authToken","authorizationCode","FacebookLoginProvider","requestOptions","fields","version","FB","init","appId","autoLogAppEvents","cookie","xfbml","status","authResponse","api","fbUser","accessToken","first_name","last_name","options","login","logout","AmazonLoginProvider","scope_data","profile","essential","redirect_uri","location","origin","amazonRoot","body","onAmazonLoginReady","amazon","Login","setClientId","token","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","Object","assign","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","getAllAccounts","length","ssoSilent","loginHint","loginPopup","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"sources":["C:/Users/gagan/OneDrive/Documents/Desktop/client-app/login-page/node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass BaseLoginProvider {\r\n    constructor() { }\r\n    loadScript(id, src, onload, parentElement = null) {\r\n        // get document if platform is only browser\r\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            let signInJS = document.createElement('script');\r\n            signInJS.async = true;\r\n            signInJS.src = src;\r\n            signInJS.onload = onload;\r\n            if (!parentElement) {\r\n                parentElement = document.head;\r\n            }\r\n            parentElement.appendChild(signInJS);\r\n        }\r\n    }\r\n}\n\nclass SocialUser {\r\n}\n\nconst defaultInitOptions = {\r\n    oneTapEnabled: true,\r\n};\r\nclass GoogleLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.changeUser = new EventEmitter();\r\n        this._socialUser = new BehaviorSubject(null);\r\n        this._accessToken = new BehaviorSubject(null);\r\n        this._receivedAccessToken = new EventEmitter();\r\n        this.initOptions = { ...defaultInitOptions, ...this.initOptions };\r\n        // emit changeUser events but skip initial value from behaviorSubject\r\n        this._socialUser.pipe(skip(1)).subscribe(this.changeUser);\r\n        // emit receivedAccessToken but skip initial value from behaviorSubject\r\n        this._accessToken.pipe(skip(1)).subscribe(this._receivedAccessToken);\r\n    }\r\n    initialize(autoLogin) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', () => {\r\n                    google.accounts.id.initialize({\r\n                        client_id: this.clientId,\r\n                        auto_select: autoLogin,\r\n                        callback: ({ credential }) => {\r\n                            const socialUser = this.createSocialUser(credential);\r\n                            this._socialUser.next(socialUser);\r\n                        },\r\n                        prompt_parent_id: this.initOptions?.prompt_parent_id,\r\n                        itp_support: this.initOptions.oneTapEnabled\r\n                    });\r\n                    if (this.initOptions.oneTapEnabled) {\r\n                        this._socialUser\r\n                            .pipe(filter((user) => user === null))\r\n                            .subscribe(() => google.accounts.id.prompt(console.debug));\r\n                    }\r\n                    if (this.initOptions.scopes) {\r\n                        const scope = this.initOptions.scopes instanceof Array\r\n                            ? this.initOptions.scopes.filter((s) => s).join(' ')\r\n                            : this.initOptions.scopes;\r\n                        this._tokenClient = google.accounts.oauth2.initTokenClient({\r\n                            client_id: this.clientId,\r\n                            scope,\r\n                            prompt: this.initOptions.prompt,\r\n                            callback: (tokenResponse) => {\r\n                                if (tokenResponse.error) {\r\n                                    this._accessToken.error({\r\n                                        code: tokenResponse.error,\r\n                                        description: tokenResponse.error_description,\r\n                                        uri: tokenResponse.error_uri,\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    this._accessToken.next(tokenResponse.access_token);\r\n                                }\r\n                            },\r\n                        });\r\n                    }\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._socialUser.value) {\r\n                resolve(this._socialUser.value);\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    refreshToken() {\r\n        return new Promise((resolve, reject) => {\r\n            google.accounts.id.revoke(this._socialUser.value.id, (response) => {\r\n                if (response.error)\r\n                    reject(response.error);\r\n                else\r\n                    resolve(this._socialUser.value);\r\n            });\r\n        });\r\n    }\r\n    getAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._tokenClient) {\r\n                if (this._socialUser.value) {\r\n                    reject('No token client was instantiated, you should specify some scopes.');\r\n                }\r\n                else {\r\n                    reject('You should be logged-in first.');\r\n                }\r\n            }\r\n            else {\r\n                this._tokenClient.requestAccessToken({\r\n                    hint: this._socialUser.value?.email,\r\n                });\r\n                this._receivedAccessToken.pipe(take(1)).subscribe(resolve);\r\n            }\r\n        });\r\n    }\r\n    revokeAccessToken() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._tokenClient) {\r\n                reject('No token client was instantiated, you should specify some scopes.');\r\n            }\r\n            else if (!this._accessToken.value) {\r\n                reject('No access token to revoke');\r\n            }\r\n            else {\r\n                google.accounts.oauth2.revoke(this._accessToken.value, () => {\r\n                    this._accessToken.next(null);\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    signIn() {\r\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' +\r\n            'or generate the button yourself with \"google.accounts.id.renderButton()\" ' +\r\n            '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\r\n    }\r\n    async signOut() {\r\n        google.accounts.id.disableAutoSelect();\r\n        this._socialUser.next(null);\r\n    }\r\n    createSocialUser(idToken) {\r\n        const user = new SocialUser();\r\n        user.idToken = idToken;\r\n        const payload = this.decodeJwt(idToken);\r\n        user.id = payload.sub;\r\n        user.name = payload.name;\r\n        user.email = payload.email;\r\n        user.photoUrl = payload.picture;\r\n        user.firstName = payload['given_name'];\r\n        user.lastName = payload['family_name'];\r\n        return user;\r\n    }\r\n    decodeJwt(idToken) {\r\n        const base64Url = idToken.split(\".\")[1];\r\n        const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        const jsonPayload = decodeURIComponent(window.atob(base64)\r\n            .split(\"\")\r\n            .map(function (c) {\r\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n        })\r\n            .join(\"\"));\r\n        return JSON.parse(jsonPayload);\r\n    }\r\n}\r\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\r\n * The service encapsulating the social login functionality. Exposes methods like\r\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n * subscribe to get the current logged in user information.\r\n *\r\n * @dynamic\r\n */\r\nclass SocialAuthService {\r\n    /**\r\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n     */\r\n    constructor(config, _ngZone, _injector) {\r\n        this._ngZone = _ngZone;\r\n        this._injector = _injector;\r\n        this.providers = new Map();\r\n        this.autoLogin = false;\r\n        this._user = null;\r\n        this._authState = new ReplaySubject(1);\r\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\r\n        this.initialized = false;\r\n        this._initState = new AsyncSubject();\r\n        if (config instanceof Promise) {\r\n            config.then((config) => {\r\n                this.initialize(config);\r\n            });\r\n        }\r\n        else {\r\n            this.initialize(config);\r\n        }\r\n    }\r\n    /** An `Observable` that one can subscribe to get the current logged in user information */\r\n    get authState() {\r\n        return this._authState.asObservable();\r\n    }\r\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\r\n    get initState() {\r\n        return this._initState.asObservable();\r\n    }\r\n    initialize(config) {\r\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\r\n        const { onError = console.error } = config;\r\n        config.providers.forEach((item) => {\r\n            this.providers.set(item.id, 'prototype' in item.provider\r\n                ? this._injector.get(item.provider)\r\n                : item.provider);\r\n        });\r\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize(this.autoLogin)))\r\n            .then(() => {\r\n            if (this.autoLogin) {\r\n                const loginStatusPromises = [];\r\n                let loggedIn = false;\r\n                this.providers.forEach((provider, key) => {\r\n                    const promise = provider.getLoginStatus();\r\n                    loginStatusPromises.push(promise);\r\n                    promise\r\n                        .then((user) => {\r\n                        this.setUser(user, key);\r\n                        loggedIn = true;\r\n                    })\r\n                        .catch(console.debug);\r\n                });\r\n                Promise.all(loginStatusPromises).catch(() => {\r\n                    if (!loggedIn) {\r\n                        this._user = null;\r\n                        this._authState.next(null);\r\n                    }\r\n                });\r\n            }\r\n            this.providers.forEach((provider, key) => {\r\n                if (isObservable(provider.changeUser)) {\r\n                    provider.changeUser.subscribe((user) => {\r\n                        this._ngZone.run(() => {\r\n                            this.setUser(user, key);\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        })\r\n            .catch((error) => {\r\n            onError(error);\r\n        })\r\n            .finally(() => {\r\n            this.initialized = true;\r\n            this._initState.next(this.initialized);\r\n            this._initState.complete();\r\n        });\r\n    }\r\n    async getAccessToken(providerId) {\r\n        const providerObject = this.providers.get(providerId);\r\n        if (!this.initialized) {\r\n            throw SocialAuthService.ERR_NOT_INITIALIZED;\r\n        }\r\n        else if (!providerObject) {\r\n            throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\r\n        }\r\n        else if (!(providerObject instanceof GoogleLoginProvider)) {\r\n            throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\r\n        }\r\n        return await providerObject.getAccessToken();\r\n    }\r\n    refreshAuthToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    if (typeof providerObject.refreshToken !== 'function') {\r\n                        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n                    }\r\n                    else {\r\n                        providerObject\r\n                            .refreshToken()\r\n                            .then((user) => {\r\n                            this.setUser(user, providerId);\r\n                            resolve();\r\n                        })\r\n                            .catch((err) => {\r\n                            reject(err);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    refreshAccessToken(providerId) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\r\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\r\n            }\r\n            else {\r\n                const providerObject = this.providers.get(providerId);\r\n                if (providerObject instanceof GoogleLoginProvider) {\r\n                    providerObject.revokeAccessToken().then(resolve).catch(reject);\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign in a user with a specific `LoginProvider`.\r\n     *\r\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n     * @param signInOptions Optional `LoginProvider` specific arguments\r\n     * @returns A `Promise` that resolves to the authenticated user information\r\n     */\r\n    signIn(providerId, signInOptions) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else {\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signIn(signInOptions)\r\n                        .then((user) => {\r\n                        this.setUser(user, providerId);\r\n                        resolve(user);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A method used to sign out the currently loggen in user.\r\n     *\r\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n     */\r\n    signOut(revoke = false) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.initialized) {\r\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\r\n            }\r\n            else if (!this._user) {\r\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\r\n            }\r\n            else {\r\n                let providerId = this._user.provider;\r\n                let providerObject = this.providers.get(providerId);\r\n                if (providerObject) {\r\n                    providerObject\r\n                        .signOut(revoke)\r\n                        .then(() => {\r\n                        resolve();\r\n                        this.setUser(null);\r\n                    })\r\n                        .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    setUser(user, id) {\r\n        if (user && id)\r\n            user.provider = id;\r\n        this._user = user;\r\n        this._authState.next(user);\r\n    }\r\n}\r\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\r\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\r\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\r\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\r\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }, { token: i0.NgZone }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\r\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialAuthService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialAuthService, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: ['SocialAuthServiceConfig']\r\n                }] }, { type: i0.NgZone }, { type: i0.Injector }]; } });\n\nclass GoogleSigninButtonDirective {\r\n    constructor(el, socialAuthService) {\r\n        this.type = 'icon';\r\n        this.size = 'medium';\r\n        this.text = 'signin_with';\r\n        this.shape = 'rectangular';\r\n        this.theme = 'outline';\r\n        this.logo_alignment = 'left';\r\n        this.width = '';\r\n        this.locale = '';\r\n        socialAuthService.initState.pipe(take(1)).subscribe(() => {\r\n            Promise.resolve(this.width).then((value) => {\r\n                if (value > '400' || (value < '200' && value != '')) {\r\n                    Promise.reject('Please note .. max-width 400 , min-width 200 ' +\r\n                        '(https://developers.google.com/identity/gsi/web/tools/configurator)');\r\n                }\r\n                else {\r\n                    google.accounts.id.renderButton(el.nativeElement, {\r\n                        type: this.type,\r\n                        size: this.size,\r\n                        text: this.text,\r\n                        width: this.width,\r\n                        shape: this.shape,\r\n                        theme: this.theme,\r\n                        logo_alignment: this.logo_alignment,\r\n                        locale: this.locale,\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nGoogleSigninButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: GoogleSigninButtonDirective, deps: [{ token: i0.ElementRef }, { token: SocialAuthService }], target: i0.ɵɵFactoryTarget.Directive });\r\nGoogleSigninButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: GoogleSigninButtonDirective, selector: \"asl-google-signin-button\", inputs: { type: \"type\", size: \"size\", text: \"text\", shape: \"shape\", theme: \"theme\", logo_alignment: \"logo_alignment\", width: \"width\", locale: \"locale\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: GoogleSigninButtonDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/directive-selector\r\n                    selector: 'asl-google-signin-button',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: SocialAuthService }]; }, propDecorators: { type: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], text: [{\r\n                type: Input\r\n            }], shape: [{\r\n                type: Input\r\n            }], theme: [{\r\n                type: Input\r\n            }], logo_alignment: [{\r\n                type: Input\r\n            }], width: [{\r\n                type: Input\r\n            }], locale: [{\r\n                type: Input\r\n            }] } });\n\n/**\r\n * The main module of angularx-social-login library.\r\n */\r\nclass SocialLoginModule {\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\r\n        }\r\n    }\r\n    static initialize(config) {\r\n        return {\r\n            ngModule: SocialLoginModule,\r\n            providers: [\r\n                SocialAuthService,\r\n                {\r\n                    provide: 'SocialAuthServiceConfig',\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialLoginModule, declarations: [GoogleSigninButtonDirective], imports: [CommonModule], exports: [GoogleSigninButtonDirective] });\r\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialLoginModule, providers: [\r\n        SocialAuthService\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SocialLoginModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [GoogleSigninButtonDirective],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    providers: [\r\n                        SocialAuthService\r\n                    ],\r\n                    exports: [GoogleSigninButtonDirective]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\r\n//\r\n// Useful for certain development situations.\r\n//\r\n// For example, if you want to simulate the greatest football referee England has ever produced:\r\n//\r\n//  const dummyUser: SocialUser = {\r\n//     id: '0123456789',\r\n//     name: 'Howard Webb',\r\n//     email: 'howard@webb.com',\r\n//     firstName: 'Howard',\r\n//     lastName: 'Webb',\r\n//     authToken: 'dummyAuthToken',\r\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\r\n//     provider: 'DUMMY',\r\n//     idToken: 'dummyIdToken',\r\n//     authorizationCode: 'dummyAuthCode'\r\n// };\r\n//\r\n//  let config = new AuthServiceConfig([\r\n//  { ... },\r\n//  {\r\n//       id: DummyLoginProvider.PROVIDER_ID,\r\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\r\n//   },\r\n//  { ... }\r\n//  ]);\r\nclass DummyLoginProvider extends BaseLoginProvider {\r\n    constructor(dummy) {\r\n        super();\r\n        if (dummy) {\r\n            this.dummy = dummy;\r\n        }\r\n        else {\r\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\r\n        }\r\n        // Start not logged in\r\n        this.loggedIn = false;\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.loggedIn) {\r\n                resolve(this.dummy);\r\n            }\r\n            else {\r\n                reject('No user is currently logged in.');\r\n            }\r\n        });\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = true;\r\n            resolve(this.dummy);\r\n        });\r\n    }\r\n    signOut(revoke) {\r\n        return new Promise((resolve, reject) => {\r\n            this.loggedIn = false;\r\n            resolve();\r\n        });\r\n    }\r\n}\r\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\r\nDummyLoginProvider.DEFAULT_USER = {\r\n    id: '1234567890',\r\n    name: 'Mickey Mouse',\r\n    email: 'mickey@mouse.com',\r\n    firstName: 'Mickey',\r\n    lastName: 'Mouse',\r\n    authToken: 'dummyAuthToken',\r\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\r\n    provider: 'DUMMY',\r\n    idToken: 'dummyIdToken',\r\n    authorizationCode: 'dummyAuthCode',\r\n    response: {},\r\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {}) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.requestOptions = {\r\n            scope: 'email,public_profile',\r\n            locale: 'en_US',\r\n            fields: 'name,email,picture,first_name,last_name',\r\n            version: 'v10.0',\r\n        };\r\n        this.requestOptions = {\r\n            ...this.requestOptions,\r\n            ...initOptions,\r\n        };\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\r\n                    FB.init({\r\n                        appId: this.clientId,\r\n                        autoLogAppEvents: true,\r\n                        cookie: true,\r\n                        xfbml: true,\r\n                        version: this.requestOptions.version,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.getLoginStatus((response) => {\r\n                if (response.status === 'connected') {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal&access_token=' +\r\n                                authResponse.accessToken;\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = { ...this.requestOptions, ...signInOptions };\r\n        return new Promise((resolve, reject) => {\r\n            FB.login((response) => {\r\n                if (response.authResponse) {\r\n                    let authResponse = response.authResponse;\r\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\r\n                        let user = new SocialUser();\r\n                        user.id = fbUser.id;\r\n                        user.name = fbUser.name;\r\n                        user.email = fbUser.email;\r\n                        user.photoUrl =\r\n                            'https://graph.facebook.com/' +\r\n                                fbUser.id +\r\n                                '/picture?type=normal';\r\n                        user.firstName = fbUser.first_name;\r\n                        user.lastName = fbUser.last_name;\r\n                        user.authToken = authResponse.accessToken;\r\n                        user.response = fbUser;\r\n                        resolve(user);\r\n                    });\r\n                }\r\n                else {\r\n                    reject('User cancelled login or did not fully authorize.');\r\n                }\r\n            }, options);\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            FB.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        scope: 'profile',\r\n        scope_data: {\r\n            profile: { essential: false },\r\n        },\r\n        redirect_uri: location.origin,\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n    }\r\n    initialize() {\r\n        let amazonRoot = null;\r\n        if (document) {\r\n            amazonRoot = document.createElement('div');\r\n            amazonRoot.id = 'amazon-root';\r\n            document.body.appendChild(amazonRoot);\r\n        }\r\n        window.onAmazonLoginReady = () => {\r\n            amazon.Login.setClientId(this.clientId);\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\r\n                    resolve();\r\n                }, amazonRoot);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => {\r\n            let token = this.retrieveToken();\r\n            if (token) {\r\n                amazon.Login.retrieveProfile(token, (response) => {\r\n                    if (response.success) {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.response = response.profile;\r\n                        resolve(user);\r\n                    }\r\n                    else {\r\n                        reject(response.error);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\r\n            }\r\n        });\r\n    }\r\n    signIn(signInOptions) {\r\n        const options = { ...this.initOptions, ...signInOptions };\r\n        return new Promise((resolve, reject) => {\r\n            amazon.Login.authorize(options, (authResponse) => {\r\n                if (authResponse.error) {\r\n                    reject(authResponse.error);\r\n                }\r\n                else {\r\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\r\n                        let user = new SocialUser();\r\n                        user.id = response.profile.CustomerId;\r\n                        user.name = response.profile.Name;\r\n                        user.email = response.profile.PrimaryEmail;\r\n                        user.authToken = authResponse.access_token;\r\n                        user.response = response.profile;\r\n                        this.persistToken(authResponse.access_token);\r\n                        resolve(user);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                amazon.Login.logout();\r\n                this.clearToken();\r\n                resolve();\r\n            }\r\n            catch (err) {\r\n                reject(err.message);\r\n            }\r\n        });\r\n    }\r\n    persistToken(token) {\r\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\r\n    }\r\n    retrieveToken() {\r\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n    clearToken() {\r\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\r\n    }\r\n}\r\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions = {\r\n        fields: 'photo_max,contacts',\r\n        version: '5.124',\r\n    }) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = initOptions;\r\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\r\n        this.VK_API_GET_USER = 'users.get';\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\r\n                    VK.init({\r\n                        apiId: this.clientId,\r\n                    });\r\n                    resolve();\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getLoginStatus() {\r\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\r\n    }\r\n    signIn() {\r\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\r\n    }\r\n    signOut() {\r\n        return new Promise((resolve, reject) => {\r\n            VK.Auth.logout((response) => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    signInInternal(resolve, reject) {\r\n        VK.Auth.login((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    getUser(userId, token, resolve) {\r\n        VK.Api.call(this.VK_API_GET_USER, {\r\n            user_id: userId,\r\n            fields: this.initOptions.fields,\r\n            v: this.initOptions.version,\r\n        }, (userResponse) => {\r\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\r\n        });\r\n    }\r\n    getLoginStatusInternal(resolve, reject) {\r\n        VK.Auth.getLoginStatus((loginResponse) => {\r\n            if (loginResponse.status === 'connected') {\r\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\r\n            }\r\n        });\r\n    }\r\n    createUser(response) {\r\n        const user = new SocialUser();\r\n        user.id = response.id;\r\n        user.name = `${response.first_name} ${response.last_name}`;\r\n        user.photoUrl = response.photo_max;\r\n        user.authToken = response.token;\r\n        return user;\r\n    }\r\n}\r\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nvar ProtocolMode;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(ProtocolMode || (ProtocolMode = {}));\r\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\r\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\r\nclass MicrosoftLoginProvider extends BaseLoginProvider {\r\n    constructor(clientId, initOptions) {\r\n        super();\r\n        this.clientId = clientId;\r\n        this.initOptions = {\r\n            authority: COMMON_AUTHORITY,\r\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\r\n            knownAuthorities: [],\r\n            protocolMode: ProtocolMode.AAD,\r\n            clientCapabilities: [],\r\n            cacheLocation: 'sessionStorage'\r\n        };\r\n        this.initOptions = {\r\n            ...this.initOptions,\r\n            ...initOptions\r\n        };\r\n    }\r\n    initialize() {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', () => {\r\n                try {\r\n                    const config = {\r\n                        auth: {\r\n                            clientId: this.clientId,\r\n                            redirectUri: this.initOptions.redirect_uri ?? location.origin,\r\n                            authority: this.initOptions.authority,\r\n                            knownAuthorities: this.initOptions.knownAuthorities,\r\n                            protocolMode: this.initOptions.protocolMode,\r\n                            clientCapabilities: this.initOptions.clientCapabilities\r\n                        },\r\n                        cache: !this.initOptions.cacheLocation ? null : {\r\n                            cacheLocation: this.initOptions.cacheLocation\r\n                        }\r\n                    };\r\n                    this._instance = new msal.PublicClientApplication(config);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    getSocialUser(loginResponse) {\r\n        return new Promise((resolve, reject) => {\r\n            //After login, use Microsoft Graph API to get user info\r\n            let meRequest = new XMLHttpRequest();\r\n            meRequest.onreadystatechange = () => {\r\n                if (meRequest.readyState == 4) {\r\n                    try {\r\n                        if (meRequest.status == 200) {\r\n                            let userInfo = JSON.parse(meRequest.responseText);\r\n                            let user = new SocialUser();\r\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\r\n                            user.id = loginResponse.idToken;\r\n                            user.authToken = loginResponse.accessToken;\r\n                            user.name = loginResponse.idTokenClaims.name;\r\n                            user.email = loginResponse.account.username;\r\n                            user.idToken = loginResponse.idToken;\r\n                            user.response = loginResponse;\r\n                            user.firstName = userInfo.givenName;\r\n                            user.lastName = userInfo.surname;\r\n                            resolve(user);\r\n                        }\r\n                        else {\r\n                            reject(`Error retrieving user info: ${meRequest.status}`);\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                    }\r\n                }\r\n            };\r\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\r\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\r\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\r\n            try {\r\n                meRequest.send();\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    async getLoginStatus() {\r\n        const accounts = this._instance.getAllAccounts();\r\n        if (accounts?.length > 0) {\r\n            const loginResponse = await this._instance.ssoSilent({\r\n                scopes: this.initOptions.scopes,\r\n                loginHint: accounts[0].username\r\n            });\r\n            return await this.getSocialUser(loginResponse);\r\n        }\r\n        else {\r\n            throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\r\n        }\r\n    }\r\n    async signIn() {\r\n        const loginResponse = await this._instance.loginPopup({\r\n            scopes: this.initOptions.scopes,\r\n            prompt: this.initOptions.prompt,\r\n        });\r\n        return await this.getSocialUser(loginResponse);\r\n    }\r\n    async signOut(revoke) {\r\n        const accounts = this._instance.getAllAccounts();\r\n        if (accounts?.length > 0) {\r\n            await this._instance.logoutPopup({\r\n                account: accounts[0],\r\n                postLogoutRedirectUri: this.initOptions.logout_redirect_uri ?? this.initOptions.redirect_uri ?? location.href\r\n            });\r\n        }\r\n    }\r\n}\r\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}