{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { environment } from '../../environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(data) {\n    return this.http.post(`${environment.URL}/auth/register`, data);\n  }\n  signin(data) {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n  getProfile() {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers\n    });\n  }\n  // getUserId(): string {\n  //   return 'some user id'; // replace this with actual implementation to get the user id\n  // }\n  // updateAddress(userId: string, address: any) {\n  //   return this.http.put<any>(`${environment.URL}/users/${userId}/address`, address);\n  // }\n  // updateAddress(address: any) {\n  //   return this.http.put<any>(`${environment.URL}/auth/address`, address);\n  // }\n  getCurrentUserId() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return null;\n    }\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.sub;\n  }\n  getAddress() {\n    const userId = this.getCurrentUserId();\n    if (!userId) {\n      return of(null);\n    }\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/user/${userId}`, {\n      headers: headers\n    }).pipe(map(response => {\n      return response.user.address;\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC1C,SAASC,WAAW,QAAQ,+BAA+B;;;AAK3D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,MAAM,CAACC,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGN,WAAW,CAACO,GAAG,gBAAgB,EAAEF,IAAI,CAAC;EACjE;EAEAG,MAAM,CAACH,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGN,WAAW,CAACO,GAAG,aAAa,EAAEF,IAAI,CAAC;EAC9D;EAEAI,UAAU;IACR,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAGd,WAAW,CAACO,GAAG,eAAe,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC;EACJ;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEAK,gBAAgB;IACd,MAAMC,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACG,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAOJ,OAAO,CAACK,GAAG;EACpB;EACAC,UAAU;IACR,MAAMC,MAAM,GAAG,IAAI,CAACT,gBAAgB,EAAE;IACtC,IAAI,CAACS,MAAM,EAAE;MACX,OAAOzB,EAAE,CAAC,IAAI,CAAC;;IAGjB,MAAMW,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAGd,WAAW,CAACO,GAAG,cAAciB,MAAM,EAAE,EAAE;MAC7Dd,OAAO,EAAEA;KACV,CAAC,CAACe,IAAI,CACL3B,GAAG,CAAE4B,QAAa,IAAI;MACpB,OAAOA,QAAQ,CAACC,IAAI,CAACC,OAAO;IAC9B,CAAC,CAAC,CACH;EACH;;AA1DW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["map","of","environment","AuthService","constructor","http","signup","data","post","URL","signin","getProfile","headers","Authorization","localStorage","getItem","get","getCurrentUserId","token","payload","JSON","parse","atob","split","sub","getAddress","userId","pipe","response","user","address","factory","providedIn"],"sourceRoot":"","sources":["D:\\CHROME DOWNLOADS\\edukit-main\\edukit-main\\login-page\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map, of } from 'rxjs';\nimport { environment } from '../../environment/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  address: any;\n  constructor(private http: HttpClient) {}\n\n  signup(data: any): Observable<any> {\n    return this.http.post(`${environment.URL}/auth/register`, data);\n  }\n\n  signin(data: any): Observable<any> {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n\n  getProfile(): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers,\n    });\n  }\n  // getUserId(): string {\n  //   return 'some user id'; // replace this with actual implementation to get the user id\n  // }\n\n  // updateAddress(userId: string, address: any) {\n  //   return this.http.put<any>(`${environment.URL}/users/${userId}/address`, address);\n  // }\n\n  // updateAddress(address: any) {\n  //   return this.http.put<any>(`${environment.URL}/auth/address`, address);\n  // }\n\n  getCurrentUserId(): string | null {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return null;\n    }\n\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.sub;\n  }\n  getAddress(): Observable<any> {\n    const userId = this.getCurrentUserId();\n    if (!userId) {\n      return of(null);\n    }\n\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/user/${userId}`, {\n      headers: headers,\n    }).pipe(\n      map((response: any) => {\n        return response.user.address;\n      })\n    );\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}