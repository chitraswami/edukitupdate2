{"ast":null,"code":"import { environment } from '../../environment/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(data) {\n    return this.http.post(`${environment.URL}/auth/register`, data);\n  }\n  signin(data) {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n  getProfile() {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers\n    }).pipe(tap(res => {\n      if (res.success) {\n        this.address = res.data.address;\n      }\n    }));\n  }\n  updateAddress(address) {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    const updatedUser = {\n      ...this.address,\n      ...address\n    }; // merge old address and new address\n    return this.http.put(`${environment.URL}/auth/address`, this.address = address, {\n      headers: headers\n    }).pipe(tap(res => {\n      this.address = res.data;\n    }));\n  }\n  // updateAddress(address: any): Observable<any> {\n  //   const headers = {\n  //     Authorization: 'Bearer ' + localStorage.getItem('token'),\n  //   };\n  //   const updatedUser = { ...this.address, ...address }; // merge old address and new address\n  //   return this.http.put(`${environment.URL}/auth/address`, updatedUser, {\n  //     headers: headers,\n  //   }).pipe(\n  //     tap((res: any) => {\n  //       this.address = res.data;\n  //     })\n  //   );\n  // }\n  getAddress() {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/address`, {\n      headers: headers\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,MAAM,CAACC,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGP,WAAW,CAACQ,GAAG,gBAAgB,EAAEF,IAAI,CAAC;EACjE;EAEAG,MAAM,CAACH,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGP,WAAW,CAACQ,GAAG,aAAa,EAAEF,IAAI,CAAC;EAC9D;EAGAI,UAAU;IACR,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAGf,WAAW,CAACQ,GAAG,eAAe,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC,CAACK,IAAI,CACLf,GAAG,CAAEgB,GAAQ,IAAI;MACf,IAAIA,GAAG,CAACC,OAAO,EAAE;QACf,IAAI,CAACC,OAAO,GAAGF,GAAG,CAACX,IAAI,CAACa,OAAO;;IAEnC,CAAC,CAAC,CACH;EACH;EAIAC,aAAa,CAACD,OAAY;IACxB,MAAMR,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACG,MAAMO,WAAW,GAAG;MAAE,GAAG,IAAI,CAACF,OAAO;MAAE,GAAGA;IAAO,CAAE,CAAC,CAAC;IAEzD,OAAO,IAAI,CAACf,IAAI,CAACkB,GAAG,CAAC,GAAGtB,WAAW,CAACQ,GAAG,eAAe,EAAE,IAAI,CAACW,OAAO,GAAGA,OAAO,EAAE;MAC9ER,OAAO,EAAEA;KACV,CAAC,CAACK,IAAI,CACLf,GAAG,CAAEgB,GAAQ,IAAI;MACf,IAAI,CAACE,OAAO,GAAGF,GAAG,CAACX,IAAI;IACzB,CAAC,CAAC,CACH;EACH;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAiB,UAAU;IACR,MAAMZ,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAGf,WAAW,CAACQ,GAAG,eAAe,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC;EACJ;;AArEWT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["environment","tap","AuthService","constructor","http","signup","data","post","URL","signin","getProfile","headers","Authorization","localStorage","getItem","get","pipe","res","success","address","updateAddress","updatedUser","put","getAddress","factory","providedIn"],"sourceRoot":"","sources":["D:\\CHROME DOWNLOADS\\edukit-main\\edukit-main\\login-page\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environment/environment';\nimport { tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  address: any;\n\n  constructor(private http: HttpClient) {}\n\n  signup(data: any): Observable<any> {\n    return this.http.post(`${environment.URL}/auth/register`, data);\n  }\n\n  signin(data: any): Observable<any> {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n\n\n  getProfile(): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers,\n    }).pipe(\n      tap((res: any) => {\n        if (res.success) {\n          this.address = res.data.address;\n        }\n      })\n    );\n  }\n\n\n\n  updateAddress(address: any): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n        const updatedUser = { ...this.address, ...address }; // merge old address and new address\n\n    return this.http.put(`${environment.URL}/auth/address`, this.address = address, {\n      headers: headers,\n    }).pipe(\n      tap((res: any) => {\n        this.address = res.data;\n      })\n    );\n  }\n\n\n  // updateAddress(address: any): Observable<any> {\n  //   const headers = {\n  //     Authorization: 'Bearer ' + localStorage.getItem('token'),\n  //   };\n  //   const updatedUser = { ...this.address, ...address }; // merge old address and new address\n  //   return this.http.put(`${environment.URL}/auth/address`, updatedUser, {\n  //     headers: headers,\n  //   }).pipe(\n  //     tap((res: any) => {\n  //       this.address = res.data;\n  //     })\n  //   );\n  // }\n\n  getAddress(): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/address`, {\n      headers: headers,\n    });\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}