{"ast":null,"code":"import { environment } from '../../environment/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(data) {\n    const {\n      displayName,\n      email,\n      password,\n      addressLine1,\n      city,\n      state,\n      postalCode\n    } = data;\n    const payload = {\n      displayName,\n      email,\n      password,\n      address: {\n        addressLine1,\n        city,\n        state,\n        postalCode\n      }\n    };\n    return this.http.post(`${environment.URL}/auth/register`, payload);\n  }\n  signin(data) {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n  getProfile() {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers\n    }).pipe(tap(res => {\n      if (res.success) {\n        this.address = res.data.address;\n        console.log(\"Initial address:\", this.address);\n      }\n    }));\n  }\n  // getProfile(): Observable<any> {\n  //   const headers = {\n  //     Authorization: 'Bearer ' + localStorage.getItem('token'),\n  //   };\n  //   return this.http.get(`${environment.URL}/auth/profile`, {\n  //     headers: headers,\n  //   });\n  // }\n  updateAddress(address) {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.put(`${environment.URL}/address`, this.address = address, {\n      headers: headers\n    }).pipe(tap(res => {\n      this.address = res.data;\n      console.log(\"Updated address:\", this.address);\n    }));\n  }\n  getAddress() {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token')\n    };\n    return this.http.get(`${environment.URL}/auth/address`, {\n      headers: headers\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,MAAM,CAACC,IAAS;IACd,MAAM;MAAEC,WAAW;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,YAAY;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAU,CAAE,GAAGP,IAAI;IACpF,MAAMQ,OAAO,GAAG;MACdP,WAAW;MACXC,KAAK;MACLC,QAAQ;MACRM,OAAO,EAAE;QACPL,YAAY;QACZC,IAAI;QACJC,KAAK;QACLC;;KAEH;IACD,OAAO,IAAI,CAACT,IAAI,CAACY,IAAI,CAAC,GAAGhB,WAAW,CAACiB,GAAG,gBAAgB,EAAEH,OAAO,CAAC;EACpE;EAGAI,MAAM,CAACZ,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACY,IAAI,CAAC,GAAGhB,WAAW,CAACiB,GAAG,aAAa,EAAEX,IAAI,CAAC;EAC9D;EAGAa,UAAU;IACR,MAAMC,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAC,GAAGxB,WAAW,CAACiB,GAAG,eAAe,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC,CAACK,IAAI,CACLxB,GAAG,CAAEyB,GAAQ,IAAI;MACf,IAAIA,GAAG,CAACC,OAAO,EAAE;QACf,IAAI,CAACZ,OAAO,GAAGW,GAAG,CAACpB,IAAI,CAACS,OAAO;QAC/Ba,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACd,OAAO,CAAC;;IAGjD,CAAC,CAAC,CACH;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGAe,aAAa,CAACf,OAAY;IACxB,MAAMK,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IAED,OAAO,IAAI,CAACnB,IAAI,CAAC2B,GAAG,CAAC,GAAG/B,WAAW,CAACiB,GAAG,UAAU,EAAE,IAAI,CAACF,OAAO,GAACA,OAAO,EAAG;MACxEK,OAAO,EAAEA;KACV,CAAC,CAACK,IAAI,CACLxB,GAAG,CAAEyB,GAAQ,IAAI;MACf,IAAI,CAACX,OAAO,GAAGW,GAAG,CAACpB,IAAI;MACvBsB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACd,OAAO,CAAC;IAE/C,CAAC,CAAC,CACH;EACH;EAGAiB,UAAU;IACR,MAAMZ,OAAO,GAAG;MACdC,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;KACxD;IACD,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAC,GAAGxB,WAAW,CAACiB,GAAG,eAAe,EAAE;MACtDG,OAAO,EAAEA;KACV,CAAC;EACJ;;AA9EWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["environment","tap","AuthService","constructor","http","signup","data","displayName","email","password","addressLine1","city","state","postalCode","payload","address","post","URL","signin","getProfile","headers","Authorization","localStorage","getItem","get","pipe","res","success","console","log","updateAddress","put","getAddress","factory","providedIn"],"sourceRoot":"","sources":["D:\\CHROME DOWNLOADS\\edukit-main\\edukit-main\\login-page\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environment/environment';\nimport { tap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  address: any;\n\n  constructor(private http: HttpClient) {}\n\n  signup(data: any): Observable<any> {\n    const { displayName, email, password, addressLine1, city, state, postalCode } = data;\n    const payload = {\n      displayName,\n      email,\n      password,\n      address: {\n        addressLine1,\n        city,\n        state,\n        postalCode\n      }\n    }\n    return this.http.post(`${environment.URL}/auth/register`, payload);\n  }\n\n\n  signin(data: any): Observable<any> {\n    return this.http.post(`${environment.URL}/auth/login`, data);\n  }\n\n\n  getProfile(): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/profile`, {\n      headers: headers,\n    }).pipe(\n      tap((res: any) => {\n        if (res.success) {\n          this.address = res.data.address;\n          console.log(\"Initial address:\", this.address);\n\n        }\n      })\n    );\n  }\n  // getProfile(): Observable<any> {\n  //   const headers = {\n  //     Authorization: 'Bearer ' + localStorage.getItem('token'),\n  //   };\n  //   return this.http.get(`${environment.URL}/auth/profile`, {\n  //     headers: headers,\n  //   });\n  // }\n\n\n  updateAddress(address: any): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n\n    return this.http.put(`${environment.URL}/address`, this.address=address,  {\n      headers: headers,\n    }).pipe(\n      tap((res: any) => {\n        this.address = res.data;\n        console.log(\"Updated address:\", this.address);\n\n      })\n    );\n  }\n\n\n  getAddress(): Observable<any> {\n    const headers = {\n      Authorization: 'Bearer ' + localStorage.getItem('token'),\n    };\n    return this.http.get(`${environment.URL}/auth/address`, {\n      headers: headers,\n    });\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}